{
	"info": {
		"_postman_id": "fa49241a-ecae-4516-9069-2975c4185b85",
		"name": "FakeStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28045329",
		"_collection_link": "https://winter-flare-26655.postman.co/workspace/FakeStoreAPIs~735f066b-c4de-486d-9da0-a281ff612282/collection/28045329-fa49241a-ecae-4516-9069-2975c4185b85?action=share&source=collection_link&creator=28045329"
	},
	"item": [
		{
			"name": "1-Products",
			"item": [
				{
					"name": "1-GetAllProducts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function chooseRandomIdFrom1To5() {\r",
									"  const randomNumber = Math.floor(Math.random() * 5) + 1;\r",
									"  return randomNumber;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"RandomID\",chooseRandomIdFrom1To5())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|1-GetAllProducts|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|1-GetAllProducts|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"4-|1-GetAllProducts|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"5-|1-GetAllProducts|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"7-|1-GetAllProducts|Check Response Body includes rating\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"8-|1-GetAllProducts|Check rating in response includes rate\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"9-|1-GetAllProducts|Check rating in response includes count\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"10-|1-GetAllProducts|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"11-|1-GetAllProducts|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"12-|1-GetAllProducts|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"13-|1-GetAllProducts|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"14-|1-GetAllProducts|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"15-|1-GetAllProducts|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"16-|1-GetAllProducts|Check that rating value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"17-|1-GetAllProducts|rate value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"18-|1-GetAllProducts|Check Count value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"19-|1-GetAllProducts|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"20-|1-GetAllProducts|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-GetAllProducts|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.be.equal(\"string\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-GetAllProducts|Check rate datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/products",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "2-GetSingleProduct",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function chooseRandomIdFrom1To5() {\r",
									"  const randomNumber = Math.floor(Math.random() * 5) + 1;\r",
									"  return randomNumber;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"RandomID\",chooseRandomIdFrom1To5())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"\r",
									"\r",
									"    pm.test(\"2-|1-GetAllProducts|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"3-|1-GetAllProducts|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"title\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"4-|1-GetAllProducts|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"price\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|1-GetAllProducts|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"description\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"image\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"7-|1-GetAllProducts|Check Response Body includes rating\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"rating\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"8-|1-GetAllProducts|Check rating in response includes rate\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating).to.have.property(\"rate\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"9-|1-GetAllProducts|Check rating in response includes count\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating).to.have.property(\"count\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"\r",
									"    pm.test(\"10-|1-GetAllProducts|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"11-|1-GetAllProducts|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).title).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"12-|1-GetAllProducts|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).price).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"13-|1-GetAllProducts|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).description).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"14-|1-GetAllProducts|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"15-|1-GetAllProducts|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).image).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"16-|1-GetAllProducts|Check that rating value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"17-|1-GetAllProducts|rate value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating.rate).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"18-|1-GetAllProducts|Check Count value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating.count).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"   pm.test(\"19-|1-GetAllProducts|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"20-|1-GetAllProducts|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).price).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"21-|1-GetAllProducts|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).description).to.be.equal(\"string\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"21-|1-GetAllProducts|Check rate datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).rating.rate).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/{{RandomID}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3-LimitResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|1-GetAllProducts|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|1-GetAllProducts|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"4-|1-GetAllProducts|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"5-|1-GetAllProducts|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"7-|1-GetAllProducts|Check Response Body includes rating\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"8-|1-GetAllProducts|Check rating in response includes rate\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"9-|1-GetAllProducts|Check rating in response includes count\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"10-|1-GetAllProducts|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"11-|1-GetAllProducts|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"12-|1-GetAllProducts|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"13-|1-GetAllProducts|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"14-|1-GetAllProducts|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"15-|1-GetAllProducts|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"16-|1-GetAllProducts|Check that rating value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"17-|1-GetAllProducts|rate value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"18-|1-GetAllProducts|Check Count value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"19-|1-GetAllProducts|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"20-|1-GetAllProducts|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-GetAllProducts|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.be.equal(\"string\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-GetAllProducts|Check rate datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.be.equal(\"number\")\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/?limit=5",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4-SortResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|4-SortResult|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|1-4-SortResult|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|1-4-SortResult|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"4-|1-4-SortResult|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"5-|1-4-SortResult|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-4-SortResult|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-4-SortResult|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"7-|1-4-SortResult|Check Response Body includes rating\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"8-|1-4-SortResult|Check rating in response includes rate\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"9-|1-4-SortResult|Check rating in response includes count\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"10-|1-4-SortResult|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"11-|1-4-SortResult|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"12-|1-4-SortResult|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"13-|1-4-SortResult|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"14-|1-4-SortResult|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"15-|1-4-SortResult|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"16-|1-4-SortResult|Check that rating value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"17-|1-4-SortResult|rate value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"18-|1-4-SortResult|Check Count value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"19-|1-4-SortResult|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"20-|1-4-SortResult|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-4-SortResult|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.be.equal(\"string\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-4-SortResult|Check rate datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/?sort=desc",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5-GetAllCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|5-GetAllCategories|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response Schema\r",
									"\r",
									"pm.test(\"2-|5-GetAllCategories|, Check that response includes electronics\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.be.equal(\"electronics\",\"jewelery\",\"men's clothing\",\"women's clothing\")\r",
									"})\r",
									"\r",
									"\r",
									"//Check Response Datatypr\r",
									"pm.test(\"3-|5-GetAllCategories|Check Response Datatype\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[0]).to.be.equal(\"string\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/products/categories",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"products",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "6-Getproductsinspecificcategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|1-GetAllProducts|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|1-GetAllProducts|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"4-|1-GetAllProducts|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"5-|1-GetAllProducts|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"7-|1-GetAllProducts|Check Response Body includes rating\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"8-|1-GetAllProducts|Check rating in response includes rate\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"9-|1-GetAllProducts|Check rating in response includes count\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"10-|1-GetAllProducts|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"11-|1-GetAllProducts|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].title).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"12-|1-GetAllProducts|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].price).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"13-|1-GetAllProducts|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].description).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"14-|1-GetAllProducts|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"15-|1-GetAllProducts|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].image).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"16-|1-GetAllProducts|Check that rating value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"17-|1-GetAllProducts|rate value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"18-|1-GetAllProducts|Check Count value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.equal(null)\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"19-|1-GetAllProducts|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"20-|1-GetAllProducts|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].price).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-GetAllProducts|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].description).to.be.equal(\"string\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"21-|1-GetAllProducts|Check rate datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].rating.rate).to.be.equal(\"number\")\r",
									"    })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/products/category/jewelery",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"products",
								"category",
								"jewelery"
							]
						}
					},
					"response": []
				},
				{
					"name": "7-AddNewProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"\r",
									"\r",
									"    pm.test(\"2-|1-GetAllProducts|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"3-|1-GetAllProducts|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"title\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"4-|1-GetAllProducts|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"price\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|1-GetAllProducts|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"description\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"image\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"\r",
									"    pm.test(\"10-|1-GetAllProducts|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"11-|1-GetAllProducts|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).title).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"12-|1-GetAllProducts|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).price).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"13-|1-GetAllProducts|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).description).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"14-|1-GetAllProducts|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"15-|1-GetAllProducts|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).image).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"    \r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"   pm.test(\"19-|1-GetAllProducts|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"20-|1-GetAllProducts|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).price).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"21-|1-GetAllProducts|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).description).to.be.equal(\"string\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"  \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n\"title\": \"test product\",\r\n      \"price\": 13.5,\r\n   \"description\": \"lorem ipsum set\",\r\n \"image\": \"https://i.pravatar.cc\",\r\n      \"category\": \"electronic\"\r\n   }\r\n            ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Baseurl}}",
							"host": [
								"{{Baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8-UpdateProduct",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n\"title\": \"test product\",\r\n  \"price\": 13.5,\r\n  \"description\": \"lorem ipsum set\",\r\n\"image\": \"https://i.pravatar.cc\",\r\n   \"category\": \"electronic\"\r\n  }\r\n \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Baseurl}}/{{RandomID}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9-DeleteProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema \r",
									"\r",
									"\r",
									"    pm.test(\"2-|1-GetAllProducts|Check Response Body includes ID\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"3-|1-GetAllProducts|Check Response Body includes Title\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"title\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"4-|1-GetAllProducts|Check Response Body includes price\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"price\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|1-GetAllProducts|Check Response Body includes description\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"description\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes category\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"6-|1-GetAllProducts|Check Response Body includes image\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"image\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"7-|1-GetAllProducts|Check Response Body includes rating\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"rating\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"8-|1-GetAllProducts|Check rating in response includes rate\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating).to.have.property(\"rate\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"9-|1-GetAllProducts|Check rating in response includes count\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating).to.have.property(\"count\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"//Validate That Response body values not equal null\r",
									"\r",
									"    pm.test(\"10-|1-GetAllProducts|Check that ID value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"11-|1-GetAllProducts|Check that Title value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).title).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"12-|1-GetAllProducts|Check that Price value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).price).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"13-|1-GetAllProducts|Check that description value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).description).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"14-|1-GetAllProducts|Check that category value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"15-|1-GetAllProducts|Check that image value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).image).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"16-|1-GetAllProducts|Check that rating value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"17-|1-GetAllProducts|rate value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating.rate).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"18-|1-GetAllProducts|Check Count value !=null\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).rating.count).to.not.equal(null)\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Check Datatype of the Response Body\r",
									"\r",
									"   pm.test(\"19-|1-GetAllProducts|Check ID datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"20-|1-GetAllProducts|Check price datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).price).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"21-|1-GetAllProducts|Check description datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).description).to.be.equal(\"string\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"21-|1-GetAllProducts|Check rate datatype\",function(){\r",
									"        pm.expect(typeof JSON.parse(responseBody).rating.rate).to.be.equal(\"number\")\r",
									"    })\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/products/{{RandomID}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"products",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2-Cart",
			"item": [
				{
					"name": "10-GetAllCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|10-GetAllCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Rsponse Schema\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"2-|10-GetAllCart|check that response body contains id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"3-|10-GetAllCart|check that response body contains userid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"4-|10-GetAllCart|check that response body contains date\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"5-|10-GetAllCart|check that response body contains products\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"6-|10-GetAllCart|check that products contains product id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"7-|10-GetAllCart|check that products contains quantity\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"8-|10-GetAllCart|check that response body contains __v\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Validate that response body values !=null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"9-|10-GetAllCart|validate id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"10-|10-GetAllCart|validate user id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"11-|10-GetAllCart|validate date value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"12-|10-GetAllCart|validate products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate productId in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate quantity in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|11-GetAllCart|validate __v value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Check Response Values Datatype\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].userId).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user date \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].date).to.be.equal(\"string\")\r",
									"})\r",
									"}\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.collectionVariables.set(\"cartID\",JSON.parse(responseBody)[i].id)\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.collectionVariables.set(\"userid\",JSON.parse(responseBody)[i].userId)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "11-GetSingleCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"1-|11-GetSingleCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema\r",
									"pm.test(\"2-|11-GetSingleCart|Check that response body contains id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"3-|11-GetSingleCart|Check that response body contains user id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userId\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|11-GetSingleCart|Check that response body contains date\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"date\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|11-GetSingleCart|Check that response body contains products\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"products\")\r",
									"})\r",
									"\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).products.length;i++)\r",
									"{\r",
									"    pm.test(\"6-|11-GetSingleCart|check that response include products id\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).products[i]).to.have.property(\"productId\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).products.length;i++)\r",
									"{\r",
									"    pm.test(\"6-|11-GetSingleCart|check that response include quantity\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).products[i]).to.have.property(\"quantity\")\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts/{{cartID}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts",
								"{{cartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12-LimitResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|10-GetAllCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Rsponse Schema\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"2-|10-GetAllCart|check that response body contains id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"3-|10-GetAllCart|check that response body contains userid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"4-|10-GetAllCart|check that response body contains date\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"5-|10-GetAllCart|check that response body contains products\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"6-|10-GetAllCart|check that products contains product id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"7-|10-GetAllCart|check that products contains quantity\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"8-|10-GetAllCart|check that response body contains __v\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Validate that response body values !=null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"9-|10-GetAllCart|validate id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"10-|10-GetAllCart|validate user id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"11-|10-GetAllCart|validate date value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"12-|10-GetAllCart|validate products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate productId in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate quantity in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|11-GetAllCart|validate __v value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Check Response Values Datatype\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].userId).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user date \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].date).to.be.equal(\"string\")\r",
									"})\r",
									"}\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.collectionVariables.set(\"cartID\",JSON.parse(responseBody)[i].id)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts?limit=5",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "13-SortResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|10-GetAllCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Rsponse Schema\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"2-|10-GetAllCart|check that response body contains id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"3-|10-GetAllCart|check that response body contains userid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"4-|10-GetAllCart|check that response body contains date\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"5-|10-GetAllCart|check that response body contains products\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"6-|10-GetAllCart|check that products contains product id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"7-|10-GetAllCart|check that products contains quantity\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"8-|10-GetAllCart|check that response body contains __v\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Validate that response body values !=null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"9-|10-GetAllCart|validate id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"10-|10-GetAllCart|validate user id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"11-|10-GetAllCart|validate date value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"12-|10-GetAllCart|validate products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate productId in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate quantity in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|11-GetAllCart|validate __v value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Check Response Values Datatype\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].userId).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user date \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].date).to.be.equal(\"string\")\r",
									"})\r",
									"}\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.collectionVariables.set(\"cartID\",JSON.parse(responseBody)[i].id)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts?sort=desc",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "14-GetDateRange",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts?startdate=2019-12-10&enddate=2020-10-10",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "startdate",
									"value": "2019-12-10"
								},
								{
									"key": "enddate",
									"value": "2020-10-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "15-Getusercart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|10-GetAllCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Rsponse Schema\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"2-|10-GetAllCart|check that response body contains id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"3-|10-GetAllCart|check that response body contains userid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"4-|10-GetAllCart|check that response body contains date\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"5-|10-GetAllCart|check that response body contains products\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"6-|10-GetAllCart|check that products contains product id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"7-|10-GetAllCart|check that products contains quantity\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"8-|10-GetAllCart|check that response body contains __v\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Validate that response body values !=null\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"9-|10-GetAllCart|validate id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"10-|10-GetAllCart|validate user id value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"11-|10-GetAllCart|validate date value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"12-|10-GetAllCart|validate products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate productId in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|10-GetAllCart|validate quantity in products value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"13-|11-GetAllCart|validate __v value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].__v).to.not.equal(null)\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"//Check Response Values Datatype\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].id).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user id \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].userId).to.be.equal(\"number\")\r",
									"})\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.test(\"14-|11-GetAllCart|Check Datatype of  user date \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody)[i].date).to.be.equal(\"string\")\r",
									"})\r",
									"}\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.collectionVariables.set(\"cartID\",JSON.parse(responseBody)[i].id)\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"pm.collectionVariables.set(\"userid\",JSON.parse(responseBody)[i].userId)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts/user/{{userid}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts",
								"user",
								"{{userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16-AddNewProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|16-AddNewProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2-|16-AddNewProducts|Check that response includes id\",function(){\r",
									"\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"\r",
									"\r",
									"//validate that id value in reposne !=null\r",
									"pm.test(\"3-|16-AddNewProducts|Check id Value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|16-AddNewProducts|Check id datatype \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "17-UpdatCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|17-UpdatCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\":{{userid}},\r\n       \"date\":\"2019-12-10\",\r\n  \"products\":\"[{productId:1,quantity:3}]\"\r\n                }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Baseurl}}/carts/{{RandomID}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "18-DeleteCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"1-|11-GetSingleCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema\r",
									"pm.test(\"2-|11-GetSingleCart|Check that response body contains id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"3-|11-GetSingleCart|Check that response body contains user id\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userId\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|11-GetSingleCart|Check that response body contains date\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"date\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|11-GetSingleCart|Check that response body contains products\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"products\")\r",
									"})\r",
									"\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).products.length;i++)\r",
									"{\r",
									"    pm.test(\"6-|11-GetSingleCart|check that response include products id\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).products[i]).to.have.property(\"productId\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"for(var i=0;i<JSON.parse(responseBody).products.length;i++)\r",
									"{\r",
									"    pm.test(\"6-|11-GetSingleCart|check that response include quantity\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).products[i]).to.have.property(\"quantity\")\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/carts/{{cartID}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"carts",
								"{{cartID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3-User",
			"item": [
				{
					"name": "19-GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status Code\r",
									"pm.test(\"1-|19-GetAllUsers|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|19-GetAllUsers|check that response include address\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include lat\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include long\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include city\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    })\r",
									"}\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"\r",
									"    pm.collectionVariables.set(\"allusersids\",JSON.parse(responseBody)[i].id)\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/users",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "20-GetSingleUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status Code\r",
									"pm.test(\"1-|20-GetSingleUser|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema\r",
									"\r",
									"\r",
									"    pm.test(\"2-|20-GetSingleUser|check that response include address\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)).to.have.property(\"address\")\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    pm.test(\"3-|20-GetSingleUser|check that response include geolocation\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).address).to.have.property(\"geolocation\")\r",
									"    })\r",
									"\r",
									"\r",
									"  pm.test(\"4-|20-GetSingleUser|check that response include lat\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).address.geolocation).to.have.property(\"lat\")\r",
									"    })\r",
									"\r",
									"\r",
									"    pm.test(\"4-|20-GetSingleUser|check that response include long\",function(){\r",
									"        pm.expect(JSON.parse(responseBody).address.geolocation).to.have.property(\"long\")\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/users/{{allusersids}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users",
								"{{allusersids}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "21-Limitresult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status Code\r",
									"pm.test(\"1-|19-GetAllUsers|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|19-GetAllUsers|check that response include address\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include lat\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include long\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include city\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    })\r",
									"}\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"\r",
									"    pm.collectionVariables.set(\"allusersids\",JSON.parse(responseBody)[i].id)\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/users?limit=5",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "22-SortResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status Code\r",
									"pm.test(\"1-|19-GetAllUsers|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"2-|19-GetAllUsers|check that response include address\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include lat\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include long\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\")\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"    pm.test(\"3-|19-GetAllUsers|check that response include city\",function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\")\r",
									"    })\r",
									"}\r",
									"\r",
									"for(var i=0; i<JSON.parse(responseBody).length; i++)\r",
									"{\r",
									"\r",
									"    pm.collectionVariables.set(\"allusersids\",JSON.parse(responseBody)[i].id)\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/users?sort=desc",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "23-AddUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code\r",
									"pm.test(\"1-|16-AddNewProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2-|16-AddNewProducts|Check that response includes id\",function(){\r",
									"\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"\r",
									"\r",
									"//validate that id value in reposne !=null\r",
									"pm.test(\"3-|16-AddNewProducts|Check id Value !=null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|16-AddNewProducts|Check id datatype \",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n\"email\":\"John@gmail.com\",\r\n \"username\":\"johnd\",\r\n \"password\":\"m38rmF$\",\r\n \"name\":{\r\n \"firstname\":\"John\",\r\n \"lastname\":\"Doe\"\r\n                    },\r\n                    \"address\":{\r\n   \"city\":\"kilcoole\",\r\n   \"street\":\"7835 new road\",\r\n                        \"number\":3,\r\n  \"zipcode\":\"12926-3874\",\r\n   \"geolocation\":{\r\n        \"lat\":-37.3159,\r\n\r\n \"long\":81.1496\r\n                        }\r\n                    },\r\n\"phone\":\"1-570-236-7033\"\r\n                }\r\n            \r\n        ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Baseurl}}/users",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "24-UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|24-UpdateUser|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema\r",
									"pm.test(\"2-|24-UpdateUser|Check that response includes email\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|24-UpdateUser|Check that response includes username\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|24-UpdateUser|Check that response includes password\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|24-UpdateUser|Check that response includes name\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"6-|24-UpdateUser|Check that response includes firstname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.have.property(\"firstname\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|24-UpdateUser|Check that response includes lastname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.have.property(\"lastname\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"7-|24-UpdateUser|Check that response includes address\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"address\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|24-UpdateUser|Check that response includes city\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"city\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"8-|24-UpdateUser|Check that response includes street\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"street\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"9-|24-UpdateUser|Check that response includes number\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"number\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"10-|24-UpdateUser|Check that response includes zipcode\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"zipcode\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \"email\":\"John@gmail.com\",\r\n                \"username\":\"johnd\",\r\n                \"password\":\"m38rmF$\",\r\n                \"name\":{\r\n                    \"firstname\":\"John\",\r\n                    \"lastname\":\"Doe\"\r\n                },\r\n                \"address\":{\r\n                    \"city\":\"kilcoole\",\r\n                    \"street\":\"7835 new road\",\r\n                    \"number\":3,\r\n                    \"zipcode\":\"12926-3874\",\r\n                    \"geolocation\":{\r\n                        \"lat\":\"-37.3159\",\r\n                        \"long\":81.1496\r\n                    }\r\n                },\r\n                \"phone\":\"1-570-236-7033\"\r\n                }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Baseurl}}/users/{{userid}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users",
								"{{userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "25-DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|24-UpdateUser|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Response Schema\r",
									"pm.test(\"2-|24-UpdateUser|Check that response includes email\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"3-|24-UpdateUser|Check that response includes username\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"4-|24-UpdateUser|Check that response includes password\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"5-|24-UpdateUser|Check that response includes name\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"6-|24-UpdateUser|Check that response includes firstname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.have.property(\"firstname\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|24-UpdateUser|Check that response includes lastname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.have.property(\"lastname\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"7-|24-UpdateUser|Check that response includes address\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"address\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"7-|24-UpdateUser|Check that response includes city\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"city\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"8-|24-UpdateUser|Check that response includes street\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"street\")\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"9-|24-UpdateUser|Check that response includes number\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"number\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"10-|24-UpdateUser|Check that response includes zipcode\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"zipcode\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Baseurl}}/users/{{userid}}",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"users",
								"{{userid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4-Login",
			"item": [
				{
					"name": "26-LoginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Token\",JSON.parse(responseBody).token)\r",
									"\r",
									"pm.test(\"1-|26-LoginUser|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Response Schema\r",
									"pm.test(\"2-|26-LoginUser|Check that response body includes token\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"token\")\r",
									"})\r",
									"\r",
									"//validate that token value not nulll\r",
									"pm.test(\"3-|26-LoginUser|check that token value not null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).token).to.not.equal(null)\r",
									"})\r",
									"\r",
									"\r",
									"//check token datatype\r",
									"pm.test(\"4-|26-LoginUser|check that token value datatype\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).token).to.be.equal(\"string\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n                \"username\": \"mor_2314\",\r\n                \"password\": \"83r5^_\"\r\n            }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Baseurl}}/auth/login",
							"host": [
								"{{Baseurl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "randomID",
			"value": ""
		},
		{
			"key": "RandomID",
			"value": ""
		},
		{
			"key": "cartID",
			"value": ""
		},
		{
			"key": "userid",
			"value": ""
		},
		{
			"key": "allusersids",
			"value": ""
		},
		{
			"key": "Token",
			"value": ""
		}
	]
}